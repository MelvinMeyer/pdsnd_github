import time
import statistics 
import pandas as pd
import numpy as np

CITY_DATA = { 'chicago': 'chicago.csv',
              'new york city': 'new_york_city.csv',
              'washington': 'washington.csv' }

def get_filters():
    """
    Asks user to specify a city, month, and day to analyze.

    Returns:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    """
    print('Hello! Let\'s explore some US bikeshare data!')
    # TO DO: get user input for city (chicago, new york city, washington). HINT: Use a while loop to handle invalid inputs
    city = input("Which city do you want to query from, Chicago, New York City or Washington?")
    while city not in ['chicago', 'new york city', 'washington']:
        city = input ("Please choose between; chicago, new york city or washington: ").lower()

    # TO DO: get user input for month (all, january, february, ... , june)
    month = input("\nWhich month of the first six months do you want to query from?\n")
    while month not in ['all', 'january', 'february', 'march', 'april', 'may', 'june']:
        month = input ("Invalid query! Please query from first six months.: ").lower()


    # TO DO: get user input for day of week (all, monday, tuesday, ... sunday)
    day = input("\nWhich day would you like to query from?\n")
    while day not in ['all', 'sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday']:
        day = input ("Invalid query! Please choose from days of week.: ").lower()

    print('-'*40)
    return city, month, day


def load_data(city, month, day):
    """
    Loads data for the specified city and filters by month and day if applicable.

    Args:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    Returns:
        df - Pandas DataFrame containing city data filtered by month and day
    """
    #load data files into a dataframe
    df = pd.read_csv(CITY_DATA[city])

    #convert start time column to datetime with format yyyy-mm-dd
    df['Start Time'] = pd.to_datetime(df['Start Time'])

    #extract month and day of week from start time to create new columns
    df['month'] = df['Start Time'].dt.month
    df['day_of_week'] = df['Start Time'].dt.weekday_name

    #filter by month
    if month != 'all':
        #use the index of the months list to get the corresponding int
        months = ['january', 'february', 'march', 'april', 'may', 'june']
        month = month.index(month) + 1
    
        #filter by month to create the new dataframe
        df = df[df['month'] == month]
    
    #filter by day
    if day != 'all':
        #filter by day of week to create the new dataframe      
        df = df[df['day_of_week']==day.title()] 
    
    return df
            
def time_stats(df):
    """Displays statistics on the most frequent times of travel."""

    print('\nCalculating The Most Frequent Times of Travel...\n')
    start_time = time.time()

    # TO DO: display the most common month
    popular_month = df['month'].value_counts().idxmax()
    print('Most Popular Month: ', popular_month)

    # TO DO: display the most common day of week
    popular_day = df['day_of_week'].value_counts().idxmax()
    print('Most Popular Day: ', popular_day)

    # TO DO: display the most common start hour
    df['hour'] = df['Start Time'].dt.hour
    popular_hour = df['hour'].value_counts().idxmax()
    print('Most Popular Hour: ', popular_hour)

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def station_stats(df):
    """Displays statistics on the most popular stations and trip."""

    print('\nCalculating The Most Popular Stations and Trip...\n')
    start_time = time.time()

    # TO DO: display most commonly used start station
    Start_Station = df['Start Station'].value_counts().idxmax()
    print("The most popular Start Station is ", Start_Station)

    # TO DO: display most commonly used end station
    End_Station = df['End Station'].value_counts().idxmax()
    print("The most popular End Station is ", End_Station)

    # TO DO: display most frequent combination of start station and end station trip
    popular_start_and_end_stations = df.groupby(['Start Station', 'End Station']).count()
    print("The most popular combination of start and end station trip is: ", Start_Station, "and", End_Station)

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def trip_duration_stats(df):
    """Displays statistics on the total and average trip duration."""

    print('\nCalculating Trip Duration...\n')
    start_time = time.time()

    # TO DO: display total travel time
    print("Total time travelled is: ", df['Trip Duration'].sum())

    # TO DO: display mean travel time
    print("Mean travel time is: ", df['Trip Duration'].mean())

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def user_stats(df):
    """Displays statistics on bikeshare users."""

    print('\nCalculating User Stats...\n')
    start_time = time.time()

    # TO DO: Display counts of user types
    user_types = df['User Type'].value_counts()
    print(user_types)

    # TO DO: Display counts of gender
    gender = df['Gender'].value_counts()
    print(gender)

    # TO DO: Display earliest, most recent, and most common year of birth
    earliest_year = int(df['Birth Year'].min())
    print("Earliest birth year is: ", earliest_year)
                    
    most_recent_year = int(df['Birth Year'].max())                  
    print("Most recent birth year is: ", most_recent_year)
      
    most_common_year = int(df['Birth Year'].value_counts().idxmax())
    print("Most common birth year is: ", most_common_year)      
      
    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)
    x = 1
    while True:
        raw = input('\nDo you want to see raw data? yes or no,\n')
        if raw.lower() == 'yes':
            print(df[x:x+5])
            x = x+5
        else: 
            break


def main():
    while True:
        city, month, day = get_filters()
        df = load_data(city, month, day)
        
        time_stats(df)
        station_stats(df)
        trip_duration_stats(df)
        user_stats(df)

        restart = input('\nWould you like to restart? Enter yes or no.\n')
        if restart.lower() != 'yes':
            break


if __name__ == "__main__":
        main()